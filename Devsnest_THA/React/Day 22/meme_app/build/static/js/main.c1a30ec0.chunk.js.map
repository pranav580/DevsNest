{"version":3,"sources":["Components/Templates.jsx","Components/Meme.jsx","App.jsx","index.js"],"names":["Templates","templates","setMeme","setBoxCount","className","map","temp","onClick","box_count","src","url","alt","id","Meme","meme","boxCount","useState","template_id","username","password","boxes","form","setForm","Array","item","index","type","placeholder","onChange","e","newBoxes","text","target","value","Url","box","fetch","then","res","json","data","success","alert","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKAkBeA,EAjBE,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,UAAYC,EAAyB,EAAzBA,QAAUC,EAAe,EAAfA,YACrC,OACI,qBAAKC,UAAU,YAAf,SACGH,EAAUI,KAAI,SAACC,GAAD,OACb,qBAAmBF,UAAU,YAAYG,QACrC,WACQL,EAAQI,GACRH,EAAYG,EAAKE,YAH7B,SAME,qBAAKC,IAAKH,EAAKI,IAAKC,IAAI,MAAMP,UAAU,WANhCE,EAAKM,U,cC2CZC,EA9CF,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAOC,EAAsB,EAAtBA,SAAWb,EAAW,EAAXA,QAE7B,EAAuBc,mBAAS,CAC5BC,YAAaH,EAAKF,GAClBM,SAAW,cACXC,SAAW,gBACXC,MAAO,KAJX,mBAAOC,EAAP,KAAYC,EAAZ,KAqBA,OACI,gCACI,qBAAKb,IAAKK,EAAKJ,IAAKC,IAAI,MAAMP,UAAU,UACxC,uBACC,YAAImB,MAAOR,IAAYV,KAAI,SAACmB,EAAKC,GAAN,OACxB,uBAEIC,KAAK,OACLC,YAAW,uBAAkBF,EAAQ,GACrCG,SAAU,SAACC,GACP,IAAMC,EAAWT,EAAKD,MACtBU,EAASL,GAAS,CAACM,KAAKF,EAAEG,OAAOC,OACjCX,EAAQ,2BAAID,GAAL,IAAWD,MAAMU,OANvBL,MAUb,gCACI,wBAAQrB,UAAU,kBAAkBG,QAhC5B,WAChB,IAAI2B,EAAG,4DAAwDb,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMf,KAAI,SAAC8B,EAAIV,GAChB,OAAOS,GAAG,iBAAeT,EAAf,mBAA+BU,EAAIJ,SAEjDK,MAAMF,GAAKG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAC5BF,MAAK,SAACG,IACe,IAAfA,EAAKC,QACJvC,EAAQ,2BAAIY,GAAL,IAAWJ,IAAK8B,EAAKA,KAAK9B,OAEjCgC,MAAM,uBAsBN,yBACA,wBAAQtC,UAAU,kBAAkBG,QAAS,WAAKL,EAAQ,OAA1D,oCCdDyC,MAxBf,WACE,MAAkC3B,mBAAS,IAA3C,mBAAOf,EAAP,KAAkB2C,EAAlB,KACA,EAAwB5B,mBAAS,MAAjC,mBAAOF,EAAP,KAAaZ,EAAb,KACA,EAAgCc,mBAAS,MAAzC,mBAAOD,EAAP,KAAiBZ,EAAjB,KASA,OARA0C,qBAAU,WACRT,MAAM,qCACLC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLI,EAAaJ,EAAKA,KAAKM,YAEzB,IAGA,sBAAK1C,UAAU,MAAf,UACE,+CACQ,OAAPU,EACE,cAAC,EAAD,CAAWb,UAAWA,EAAWC,QAASA,EAASC,YAAaA,IAEjE,cAAC,EAAD,CAAMW,KAAMA,EAAMC,SAAUA,EAAUb,QAASA,Q,MCjBvD6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.c1a30ec0.chunk.js","sourcesContent":["\r\nconst Templates= ({templates , setMeme , setBoxCount})=>{\r\n    return(\r\n        <div className=\"container\">\r\n          {templates.map((temp)=>(\r\n            <div key={temp.id} className=\"templates\" onClick={\r\n                ()=>{\r\n                        setMeme(temp);\r\n                        setBoxCount(temp.box_count);\r\n                    }\r\n                }>\r\n              <img src={temp.url} alt=\"img\" className=\"image\"/>\r\n            </div>\r\n          ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Templates;","import { useState } from \"react\";\r\n\r\nconst Meme = ({meme , boxCount , setMeme})=>{\r\n\r\n    const [form,setForm] = useState({\r\n        template_id: meme.id,\r\n        username : \"stringster7\",\r\n        password : \"facebook41980\",\r\n        boxes: [],\r\n    });\r\n    const genrateMeme = ()=>{\r\n        let Url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box,index)=>{\r\n            return(Url += (`&boxes[${index}][text]=${box.text}`));\r\n        });\r\n        fetch(Url).then((res) => res.json())\r\n        .then((data)=>{\r\n            if(data.success===true){\r\n                setMeme({...meme, url: data.data.url})\r\n            }else{\r\n                alert(\"Enter Some Text\");\r\n            }\r\n        })\r\n        \r\n    }\r\n    return(\r\n        <div>\r\n            <img src={meme.url} alt=\"img\" className=\"image\"/>\r\n            <br/>\r\n            {[...Array( boxCount )].map((item,index)=>(\r\n                <input \r\n                    key={index} \r\n                    type=\"text\" \r\n                    placeholder={`Meme Caption ${index + 1}`}\r\n                    onChange={(e)=>{\r\n                        const newBoxes = form.boxes;\r\n                        newBoxes[index] = {text:e.target.value};\r\n                        setForm({...form, boxes:newBoxes});\r\n                    }}\r\n                />\r\n            ))}\r\n            <div>\r\n                <button className=\"btn btn-primary\" onClick={genrateMeme}>Create Meme</button>\r\n                <button className=\"btn btn-primary\" onClick={()=>{setMeme(null)}}>Choose Template</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Meme;","import { useState, useEffect } from 'react';\nimport './index.css';\nimport Templates from './Components/Templates';\nimport Meme from './Components/Meme';\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [meme, setMeme] = useState(null);\n  const [boxCount, setBoxCount] = useState(null);\n  useEffect(()=>{\n    fetch(\"https://api.imgflip.com/get_memes\")\n    .then((res) => res.json())\n    .then((data) => {\n      setTemplates(data.data.memes)\n    });\n  },[]);\n  \n  return (\n    <div className=\"App\">\n      <h1>Meme Genrator</h1>\n      {meme===null ? \n        (<Templates templates={templates} setMeme={setMeme} setBoxCount={setBoxCount}/>) \n        : \n        <Meme meme={meme} boxCount={boxCount} setMeme={setMeme}/>}\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}